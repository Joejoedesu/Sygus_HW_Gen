; simple testing for FP synthesis approximating the identity using BV
(set-logic ALL)

(synth-fun f ((x (_ BitVec 16))) (_ BitVec 16)
((Full_BV (_ BitVec 16)) (CaseBool Bool) (SIGN (_ BitVec 1))
 (EXP (_ BitVec 8)) (SIG (_ BitVec 7)))
((Full_BV (_ BitVec 16)
   (
    (concat (concat SIGN EXP) SIG)
    x
   ))
(CaseBool Bool ((= ((_ to_fp 8 8) Full_BV) ((_ to_fp 8 8) Full_BV))
                (fp.lt ((_ to_fp 8 8) Full_BV) ((_ to_fp 8 8) Full_BV))))
               ;  (bvslt EXP EXP)
               ;  (= EXP EXP)
               ;  (bvslt SIG SIG)
               ;  (= SIG SIG)))
(SIGN (_ BitVec 1) ((_ bv0 1)
                    (_ bv1 1)
                    ((_ extract 15 15) Full_BV)
                    (bvand SIGN SIGN)
                    (bvor SIGN SIGN)))
(EXP (_ BitVec 8) ((_ bv0 8)
                   (_ bv1 8)
                   ((_ extract 14 7) Full_BV)
                   (bvshl EXP EXP)
                   (bvlshr EXP EXP)
                   (bvadd EXP EXP)))
(SIG (_ BitVec 7) ((_ bv0 7)
                    (_ bv1 7)
                    ((_ extract 6 0) Full_BV)
                    (bvshl SIG SIG)
                    (bvlshr SIG SIG)
                    (bvadd SIG SIG)))))

(declare-var x (_ BitVec 16))
(declare-var bf (_ FloatingPoint 8 8))
(assume (fp.lt bf ((_ to_fp 8 8) RNE 1.0)))
(assume (fp.gt bf ((_ to_fp 8 8) RNE 0.0)))
(assume (= ((_ to_fp 8 8) x) bf))

(constraint (= ((_ to_fp 8 8) (f x)) (fp.add RNE bf ((_ to_fp 8 8) RNE 1.0))))
; (constraint (= ((_ to_fp 8 8) (f x)) bf))
; (constraint (= (f x) x))
(check-synth)
   